	//plotting timing diff; mymeas.timimng_results[waveform][1] contains cfd-time
	int channel1 = 10; int channel2 = 11;
	// match channel number to channel index
	int ch_index1, ch_index2 = 0;
	for (int i = 0; i < mymeas.active_channels.size(); i++) {
		if (mymeas.active_channels[i] == channel1) ch_index1 = i;
		if (mymeas.active_channels[i] == channel2) ch_index2 = i;
	}

	gStyle->SetOptStat("nemr"); //draws a box with some histogram parameters

	TString his_name(Form("ch%2d-ch%2d_at_cfd_%0.2f", channel2, channel1, cfd_x));
	TCanvas* combi = new TCanvas("combi", "different filters", 600, 400);
	int nbins = 200; int min = -15; int max = 15;
	TH1* his1 = new TH1F("all_events", "Combined_his_"+his_name, nbins, min, max);
	TH1* his2 = new TH1F("ortho_skipped", "Combined_his_"+his_name, nbins, min, max);
	TH1* his3 = new TH1F("ortho_only", "Combined_his_"+his_name, nbins, min, max);

	for (int i=0 ; i < mymeas.nevents ; i++){ //loop through all the events
		his1->Fill(mymeas.timing_results[i*mymeas.nchannels+ch_index2][1]-mymeas.timing_results[i*mymeas.nchannels+ch_index1][1]); //all events
		if (mymeas.skip_event[i]) {
			his2->Fill(mymeas.timing_results[i*mymeas.nchannels+ch_index2][1]-mymeas.timing_results[i*mymeas.nchannels+ch_index1][1]); //ortho events skipped
		}
		else {
			his3->Fill(mymeas.timing_results[i*mymeas.nchannels+ch_index2][1]-mymeas.timing_results[i*mymeas.nchannels+ch_index1][1]); //ortho events
		}
	}

	his1->GetXaxis()->SetTitle("time [ns]");
	his1->GetYaxis()->SetTitle("#Entries");
	his1->Draw(); gPad->Update(); // draw the first histogram on canvas // force the update, so stat box gets drawn
	TPaveStats* t = (TPaveStats*)his1->FindObject("stats"); // find the stats, only works if the stat-box is drawn in first place
	t->SetY1NDC(.77); t->SetY2NDC(.92); // new y start position // new y end position
	his2->SetLineColor(kRed);
	his2->Draw("sames"); gPad->Update(); // draw the second histogram on canvas // force the update, so stat box gets drawn
	TPaveStats* s = (TPaveStats*)his2->FindObject("stats"); // find the stats, only works if the stat-box is drawn in first place
	s->SetY1NDC(.6); s->SetY2NDC(.75); // new y start position // new y end position
	his3->SetLineColor(kOrange);
	his3->Draw("sames"); gPad->Update(); // draw the third histogram on canvas // force the update, so stat box gets drawn
	TPaveStats* u = (TPaveStats*)his3->FindObject("stats"); // find the stats, only works if the stat-box is drawn in first place
	u->SetY1NDC(.43); u->SetY2NDC(.58); // new y start position // new y end position
	combi->Update(); //put everything on the canvas
	
	TString pdf_filename(Form("run%2d_%2d-%2d_combined.pdf", run, channel2, channel1));
	gErrorIgnoreLevel = kError; //suppress root terminal output
	combi->Print(pdf_filename); //write the histogram to a .pdf-file (this makes saving in a root-file kinda redundant)
	gErrorIgnoreLevel = kUnset;